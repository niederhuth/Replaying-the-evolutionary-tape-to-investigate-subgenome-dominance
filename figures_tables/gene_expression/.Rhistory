n12=nrow(subset(d2,CvT==1 & KvT==1)),
n23=nrow(subset(d2,KvT==1 & KvC==1)),
n13=nrow(subset(d2,CvT==1 & KvC==1)),
n123=nrow(subset(d2,CvT==1 & KvT==1 & KvC==1)),
category = c("Cabbage v TO1000", "Kale v TO100", "Kale v Cabbage"),
lty = "blank",
fill = c("skyblue", "pink1", "mediumorchid")
)
dev.off()
##GO term enrichment
library(topGO)
library(GO.db)
goTerms <- readMappings(file="../misc/topGO.txt")
CvTgotermUP <- factor(as.integer(resCvT$id %in% CvTsig[CvTsig$log2FC > 1,]$id))
names(CvTgotermUP) <- resCvT$id
CvTgotermUP <- topGO(CvTgotermUP,goTerms,nodeSize=5,"CvT_up",writeData=TRUE)
CvTgotermDOWN <- factor(as.integer(resCvT$id %in% CvTsig[CvTsig$log2FC < -1,]$id))
names(CvTgotermDOWN) <- resCvT$id
CvTgotermDOWN <- topGO(CvTgotermDOWN,goTerms,nodeSize=5,"CvT_down",writeData=TRUE)
KvTgotermUP <- factor(as.integer(resKvT$id %in% KvTsig[KvTsig$log2FC > 1,]$id))
names(KvTgotermUP) <- resKvT$id
KvTgotermUP <- topGO(KvTgotermUP,goTerms,nodeSize=5,"KvT_up",writeData=TRUE)
KvTgotermDOWN <- factor(as.integer(resKvT$id %in% KvTsig[KvTsig$log2FC < -1,]$id))
names(KvTgotermDOWN) <- resKvT$id
KvTgotermDOWN <- topGO(KvTgotermDOWN,goTerms,nodeSize=5,"KvT_down",writeData=TRUE)
KvCgotermUP <- factor(as.integer(resKvC$id %in% KvCsig[KvCsig$log2FC > 1,]$id))
names(KvCgotermUP) <- resKvC$id
KvCgotermUP <- topGO(KvCgotermUP,goTerms,nodeSize=5,"KvC_up",writeData=TRUE)
KvCgotermDOWN <- factor(as.integer(resKvC$id %in% KvCsig[KvCsig$log2FC < -1,]$id))
names(KvCgotermDOWN) <- resKvC$id
KvCgotermDOWN <- topGO(KvCgotermDOWN,goTerms,nodeSize=5,"KvC_down",writeData=TRUE)
upGoterm <- merge(CvTgotermUP$BP,KvTgotermUP$BP,by.x="GO.ID",by.y="GO.ID")
upGoterm <- merge(upGoterm,KvCgotermUP$BP,by.x="GO.ID",by.y="GO.ID")
upSig <- upGoterm[upGoterm$fdr.x < 0.05 | upGoterm$fdr.y < 0.05 | upGoterm$fdr < 0.05, ]
upSig <- data.frame(Term = upSig$Term, CvT_FDR = upSig$fdr.x, CvT_sig = upSig$Significant.x, KvT_FDR = upSig$fdr.y, KvT_sig = upSig$Significant.y, KvC_FDR = upSig$fdr, KvC_sig = upSig$Significant)
upSig$CvT_FDR <- ifelse(upSig$CvT_FDR < 0.05, upSig$CvT_FDR, NA)
upSig$CvT_sig <- ifelse(upSig$CvT_FDR < 0.05, upSig$CvT_sig, NA)
upSig$KvT_FDR <- ifelse(upSig$KvT_FDR < 0.05, upSig$KvT_FDR, NA)
upSig$KvT_sig <- ifelse(upSig$KvT_FDR < 0.05, upSig$KvT_sig, NA)
upSig$KvC_FDR <- ifelse(upSig$KvC_FDR < 0.05, upSig$KvC_FDR, NA)
upSig$KvC_sig <- ifelse(upSig$KvC_FDR < 0.05, upSig$KvC_sig, NA)
ggsave("goTerms/Up_BP.pdf",plot=GOdotplot2(upSig))
upGoterm <- merge(CvTgotermUP$MF,KvTgotermUP$MF,by.x="GO.ID",by.y="GO.ID")
upGoterm <- merge(upGoterm,KvCgotermUP$MF,by.x="GO.ID",by.y="GO.ID")
upSig <- upGoterm[upGoterm$fdr.x < 0.05 | upGoterm$fdr.y < 0.05 | upGoterm$fdr < 0.05, ]
upSig <- data.frame(Term = upSig$Term, CvT_FDR = upSig$fdr.x, CvT_sig = upSig$Significant.x, KvT_FDR = upSig$fdr.y, KvT_sig = upSig$Significant.y, KvC_FDR = upSig$fdr, KvC_sig = upSig$Significant)
upSig$CvT_FDR <- ifelse(upSig$CvT_FDR < 0.05, upSig$CvT_FDR, NA)
upSig$CvT_sig <- ifelse(upSig$CvT_FDR < 0.05, upSig$CvT_sig, NA)
upSig$KvT_FDR <- ifelse(upSig$KvT_FDR < 0.05, upSig$KvT_FDR, NA)
upSig$KvT_sig <- ifelse(upSig$KvT_FDR < 0.05, upSig$KvT_sig, NA)
upSig$KvC_FDR <- ifelse(upSig$KvC_FDR < 0.05, upSig$KvC_FDR, NA)
upSig$KvC_sig <- ifelse(upSig$KvC_FDR < 0.05, upSig$KvC_sig, NA)
ggsave("goTerms/Up_MF.pdf",plot=GOdotplot2(upSig))
upGoterm <- merge(CvTgotermUP$CC,KvTgotermUP$CC,by.x="GO.ID",by.y="GO.ID")
upGoterm <- merge(upGoterm,KvCgotermUP$CC,by.x="GO.ID",by.y="GO.ID")
upSig <- upGoterm[upGoterm$fdr.x < 0.05 | upGoterm$fdr.y < 0.05 | upGoterm$fdr < 0.05, ]
upSig <- data.frame(Term = upSig$Term, CvT_FDR = upSig$fdr.x, CvT_sig = upSig$Significant.x, KvT_FDR = upSig$fdr.y, KvT_sig = upSig$Significant.y, KvC_FDR = upSig$fdr, KvC_sig = upSig$Significant)
upSig$CvT_FDR <- ifelse(upSig$CvT_FDR < 0.05, upSig$CvT_FDR, NA)
upSig$CvT_sig <- ifelse(upSig$CvT_FDR < 0.05, upSig$CvT_sig, NA)
upSig$KvT_FDR <- ifelse(upSig$KvT_FDR < 0.05, upSig$KvT_FDR, NA)
upSig$KvT_sig <- ifelse(upSig$KvT_FDR < 0.05, upSig$KvT_sig, NA)
upSig$KvC_FDR <- ifelse(upSig$KvC_FDR < 0.05, upSig$KvC_FDR, NA)
upSig$KvC_sig <- ifelse(upSig$KvC_FDR < 0.05, upSig$KvC_sig, NA)
ggsave("goTerms/Up_CC.pdf",plot=GOdotplot2(upSig))
downGoterm <- merge(CvTgotermDOWN$BP,KvTgotermDOWN$BP,by.x="GO.ID",by.y="GO.ID")
downGoterm <- merge(downGoterm,KvCgotermDOWN$BP,by.x="GO.ID",by.y="GO.ID")
downSig <- downGoterm[downGoterm$fdr.x < 0.05 | downGoterm$fdr.y < 0.05 | downGoterm$fdr < 0.05, ]
downSig <- data.frame(Term = downSig$Term, CvT_FDR = downSig$fdr.x, CvT_sig = downSig$Significant.x, KvT_FDR = downSig$fdr.y, KvT_sig = downSig$Significant.y, KvC_FDR = downSig$fdr, KvC_sig = downSig$Significant)
downSig$CvT_FDR <- ifelse(downSig$CvT_FDR < 0.05, downSig$CvT_FDR, NA)
downSig$CvT_sig <- ifelse(downSig$CvT_FDR < 0.05, downSig$CvT_sig, NA)
downSig$KvT_FDR <- ifelse(downSig$KvT_FDR < 0.05, downSig$KvT_FDR, NA)
downSig$KvT_sig <- ifelse(downSig$KvT_FDR < 0.05, downSig$KvT_sig, NA)
downSig$KvC_FDR <- ifelse(downSig$KvC_FDR < 0.05, downSig$KvC_FDR, NA)
downSig$KvC_sig <- ifelse(downSig$KvC_FDR < 0.05, downSig$KvC_sig, NA)
ggsave("goTerms/Down_BP.pdf",plot=GOdotplot2(downSig))
downGoterm <- merge(CvTgotermDOWN$MF,KvTgotermDOWN$MF,by.x="GO.ID",by.y="GO.ID")
downGoterm <- merge(downGoterm,KvCgotermDOWN$MF,by.x="GO.ID",by.y="GO.ID")
downSig <- downGoterm[downGoterm$fdr.x < 0.05 | downGoterm$fdr.y < 0.05 | downGoterm$fdr < 0.05, ]
downSig <- data.frame(Term = downSig$Term, CvT_FDR = downSig$fdr.x, CvT_sig = downSig$Significant.x, KvT_FDR = downSig$fdr.y, KvT_sig = downSig$Significant.y, KvC_FDR = downSig$fdr, KvC_sig = downSig$Significant)
downSig$CvT_FDR <- ifelse(downSig$CvT_FDR < 0.05, downSig$CvT_FDR, NA)
downSig$CvT_sig <- ifelse(downSig$CvT_FDR < 0.05, downSig$CvT_sig, NA)
downSig$KvT_FDR <- ifelse(downSig$KvT_FDR < 0.05, downSig$KvT_FDR, NA)
downSig$KvT_sig <- ifelse(downSig$KvT_FDR < 0.05, downSig$KvT_sig, NA)
downSig$KvC_FDR <- ifelse(downSig$KvC_FDR < 0.05, downSig$KvC_FDR, NA)
downSig$KvC_sig <- ifelse(downSig$KvC_FDR < 0.05, downSig$KvC_sig, NA)
ggsave("goTerms/Down_MF.pdf",plot=GOdotplot2(downSig))
downGoterm <- merge(CvTgotermDOWN$CC,KvTgotermDOWN$CC,by.x="GO.ID",by.y="GO.ID")
downGoterm <- merge(downGoterm,KvCgotermDOWN$CC,by.x="GO.ID",by.y="GO.ID")
downSig <- downGoterm[downGoterm$fdr.x < 0.05 | downGoterm$fdr.y < 0.05 | downGoterm$fdr < 0.05, ]
downSig <- data.frame(Term = downSig$Term, CvT_FDR = downSig$fdr.x, CvT_sig = downSig$Significant.x, KvT_FDR = downSig$fdr.y, KvT_sig = downSig$Significant.y, KvC_FDR = downSig$fdr, KvC_sig = downSig$Significant)
downSig$CvT_FDR <- ifelse(downSig$CvT_FDR < 0.05, downSig$CvT_FDR, NA)
downSig$CvT_sig <- ifelse(downSig$CvT_FDR < 0.05, downSig$CvT_sig, NA)
downSig$KvT_FDR <- ifelse(downSig$KvT_FDR < 0.05, downSig$KvT_FDR, NA)
downSig$KvT_sig <- ifelse(downSig$KvT_FDR < 0.05, downSig$KvT_sig, NA)
downSig$KvC_FDR <- ifelse(downSig$KvC_FDR < 0.05, downSig$KvC_FDR, NA)
downSig$KvC_sig <- ifelse(downSig$KvC_FDR < 0.05, downSig$KvC_sig, NA)
ggsave("goTerms/Down_CC.pdf",plot=GOdotplot2(downSig))
CvTgotermUP <- factor(as.integer(resCvT$id %in% CvTsig[CvTsig$log2FC > 1,]$id))
names(CvTgotermUP) <- resCvT$id
CvTgotermUP <- topGO(CvTgotermUP,goTerms,nodeSize=5,"CvT_up",writeData=TRUE)
CvTgotermDOWN <- factor(as.integer(resCvT$id %in% CvTsig[CvTsig$log2FC < -1,]$id))
names(CvTgotermDOWN) <- resCvT$id
CvTgotermDOWN <- topGO(CvTgotermDOWN,goTerms,nodeSize=5,"CvT_down",writeData=TRUE)
KvTgotermUP <- factor(as.integer(resKvT$id %in% KvTsig[KvTsig$log2FC > 1,]$id))
names(KvTgotermUP) <- resKvT$id
KvTgotermUP <- topGO(KvTgotermUP,goTerms,nodeSize=5,"KvT_up",writeData=TRUE)
KvTgotermDOWN <- factor(as.integer(resKvT$id %in% KvTsig[KvTsig$log2FC < -1,]$id))
names(KvTgotermDOWN) <- resKvT$id
KvTgotermDOWN <- topGO(KvTgotermDOWN,goTerms,nodeSize=5,"KvT_down",writeData=TRUE)
KvCgotermUP <- factor(as.integer(resKvC$id %in% KvCsig[KvCsig$log2FC > 1,]$id))
names(KvCgotermUP) <- resKvC$id
KvCgotermUP <- topGO(KvCgotermUP,goTerms,nodeSize=5,"KvC_up",writeData=TRUE)
KvCgotermDOWN <- factor(as.integer(resKvC$id %in% KvCsig[KvCsig$log2FC < -1,]$id))
names(KvCgotermDOWN) <- resKvC$id
KvCgotermDOWN <- topGO(KvCgotermDOWN,goTerms,nodeSize=5,"KvC_down",writeData=TRUE)
upGoterm <- merge(CvTgotermUP$BP,KvTgotermUP$BP,by.x="GO.ID",by.y="GO.ID")
upGoterm <- merge(upGoterm,KvCgotermUP$BP,by.x="GO.ID",by.y="GO.ID")
upSig <- upGoterm[upGoterm$fdr.x < 0.05 | upGoterm$fdr.y < 0.05 | upGoterm$fdr < 0.05, ]
upSig <- data.frame(Term = upSig$Term, CvT_FDR = upSig$fdr.x, CvT_sig = upSig$Significant.x, KvT_FDR = upSig$fdr.y, KvT_sig = upSig$Significant.y, KvC_FDR = upSig$fdr, KvC_sig = upSig$Significant)
upSig$CvT_FDR <- ifelse(upSig$CvT_FDR < 0.05, upSig$CvT_FDR, NA)
upSig$CvT_sig <- ifelse(upSig$CvT_FDR < 0.05, upSig$CvT_sig, NA)
upSig$KvT_FDR <- ifelse(upSig$KvT_FDR < 0.05, upSig$KvT_FDR, NA)
upSig$KvT_sig <- ifelse(upSig$KvT_FDR < 0.05, upSig$KvT_sig, NA)
upSig$KvC_FDR <- ifelse(upSig$KvC_FDR < 0.05, upSig$KvC_FDR, NA)
upSig$KvC_sig <- ifelse(upSig$KvC_FDR < 0.05, upSig$KvC_sig, NA)
ggsave("goTerms/Up_BP.pdf",plot=GOdotplot2(upSig))
upGoterm <- merge(CvTgotermUP$MF,KvTgotermUP$MF,by.x="GO.ID",by.y="GO.ID")
upGoterm <- merge(upGoterm,KvCgotermUP$MF,by.x="GO.ID",by.y="GO.ID")
upSig <- upGoterm[upGoterm$fdr.x < 0.05 | upGoterm$fdr.y < 0.05 | upGoterm$fdr < 0.05, ]
upSig <- data.frame(Term = upSig$Term, CvT_FDR = upSig$fdr.x, CvT_sig = upSig$Significant.x, KvT_FDR = upSig$fdr.y, KvT_sig = upSig$Significant.y, KvC_FDR = upSig$fdr, KvC_sig = upSig$Significant)
upSig$CvT_FDR <- ifelse(upSig$CvT_FDR < 0.05, upSig$CvT_FDR, NA)
upSig$CvT_sig <- ifelse(upSig$CvT_FDR < 0.05, upSig$CvT_sig, NA)
upSig$KvT_FDR <- ifelse(upSig$KvT_FDR < 0.05, upSig$KvT_FDR, NA)
upSig$KvT_sig <- ifelse(upSig$KvT_FDR < 0.05, upSig$KvT_sig, NA)
upSig$KvC_FDR <- ifelse(upSig$KvC_FDR < 0.05, upSig$KvC_FDR, NA)
upSig$KvC_sig <- ifelse(upSig$KvC_FDR < 0.05, upSig$KvC_sig, NA)
goTerms <- readMappings(file="../misc/topGO.txt")
CvTgotermUP <- factor(as.integer(resCvT$id %in% CvTsig[CvTsig$log2FC > 1,]$id))
names(CvTgotermUP) <- resCvT$id
CvTgotermUP <- topGO(CvTgotermUP,goTerms,nodeSize=5,"CvT_up",writeData=TRUE)
head(topGO())
head(goTerms)
tail(goTerms)
CvTgotermDOWN <- factor(as.integer(resCvT$id %in% CvTsig[CvTsig$log2FC < -1,]$id))
names(CvTgotermDOWN) <- resCvT$id
CvTgotermDOWN <- topGO(CvTgotermDOWN,goTerms,nodeSize=5,"CvT_down",writeData=TRUE)
KvTgotermUP <- factor(as.integer(resKvT$id %in% KvTsig[KvTsig$log2FC > 1,]$id))
names(KvTgotermUP) <- resKvT$id
KvTgotermUP <- topGO(KvTgotermUP,goTerms,nodeSize=5,"KvT_up",writeData=TRUE)
KvTgotermDOWN <- factor(as.integer(resKvT$id %in% KvTsig[KvTsig$log2FC < -1,]$id))
names(KvTgotermDOWN) <- resKvT$id
KvTgotermDOWN <- topGO(KvTgotermDOWN,goTerms,nodeSize=5,"KvT_down",writeData=TRUE)
KvCgotermUP <- factor(as.integer(resKvC$id %in% KvCsig[KvCsig$log2FC > 1,]$id))
names(KvCgotermUP) <- resKvC$id
KvCgotermUP <- topGO(KvCgotermUP,goTerms,nodeSize=5,"KvC_up",writeData=TRUE)
KvCgotermDOWN <- factor(as.integer(resKvC$id %in% KvCsig[KvCsig$log2FC < -1,]$id))
names(KvCgotermDOWN) <- resKvC$id
KvCgotermDOWN <- topGO(KvCgotermDOWN,goTerms,nodeSize=5,"KvC_down",writeData=TRUE)
resCvT$id %in% CvTsig[CvTsig$log2FC > 1,]$id
table(resCvT$id %in% CvTsig[CvTsig$log2FC > 1,]$id)
CvTgotermUP <- factor(as.integer(resCvT$id %in% CvTsig[CvTsig$log2FC > 1,]$id))
names(CvTgotermUP) <- resCvT$id
GOTERM
#DESeq2
#Run initial DESeq2 analysis
#Load Deseq2
library(DESeq2)
#Read in sample metadata
sampleTable <- read.csv("../misc/sample_metadata.csv",header=T)
#Read in Counts Table
dds <- DESeqDataSetFromHTSeqCount(sampleTable,design= ~ condition)
#Prefilter
dds <- dds[rowSums(counts(dds)) > 10,]
#Set reference level
dds$condition <- relevel(dds$condition, ref="TO1000")
#Estimate Size Factors
dds <- estimateSizeFactors(dds)
#Estimate Dispersions
dds <- estimateDispersions(dds,fitType="parametric")
#Run Wald Test
dds <- nbinomWaldTest(dds)
#Make diagnostic figures of samples
#Make a heat map of samples
rld <- rlog(dds, blind=TRUE)
pdf("sampleHeatMap.pdf",width=6,height=6,paper='special')
sampleHeatMap(rld)
dev.off()
#Make a PCA plot of samples
pdf("samplePCA.pdf",width=6,height=6,paper='special')
pcaPlot(rld)
dev.off()
#Make results tables for each pairwise comparison
resKvT <- makeResultsTable(dds,"kale","TO1000",filter=FALSE)
resKvC <- makeResultsTable(dds,"kale","cabbage",filter=FALSE)
resCvT <- makeResultsTable(dds,"cabbage","TO1000",filter=FALSE)
#Combine results tables
resfull <- as.data.frame(rbind(resKvT,resKvC,resCvT))
#Adjust p-values for all results
resfull$padj <- p.adjust(resfull$pval,method="BH")
#Extract and output a table of normalized counts
normalizedCounts <- counts(dds, normalized=TRUE)
all_genes <- data.frame(gene=row.names(normalizedCounts), normalizedCounts[,c(3,4,5,1,2,6,7,8)],
as.data.frame(sapply(levels(dds$condition),
function(lvl) rowMeans(counts(dds,normalized=TRUE)[,dds$condition == lvl]))),
resfull[resfull$sampleA=="kale" & resfull$sampleB=="TO1000",c(6,8)],
resfull[resfull$sampleA=="kale" & resfull$sampleB=="cabbage",c(6,8)],
resfull[resfull$sampleA=="cabbage" & resfull$sampleB=="TO1000",c(6,8)])
colnames(all_genes) <- c("gene","kale1", "kale2", "kale3", "cabbage1", "cabbage2",
"TO10001", "TO10002", "TO10003", "kale_mean",
"cabbage_mean", "TO1000_mean", "KvT_log2FC", "KvT_padj",
"KvC_log2FC", "KvC_padj", "CvT_log2FC", "CvT_padj" )
write.table(all_genes, "Gene_expression_table.tsv",sep="\t",
quote=FALSE, row.names=FALSE)
#Extract significant DEGs
sig <- na.omit(resfull[resfull$padj <= 0.05 & resfull$log2FC >= 1 | resfull$padj <= 0.05 & resfull$log2FC <= -1,])
#Count number of DEGs for each comparison
table(sig$sampleA,sig$sampleB)
#For each pairwise comparison, extract the DEGs
CvTsig <- sig[sig$sampleA == "cabbage" & sig$sampleB == "TO1000",]
KvTsig <- sig[sig$sampleA == "kale" & sig$sampleB == "TO1000",]
KvCsig <- sig[sig$sampleA == "kale" & sig$sampleB == "cabbage",]
#Venn Diagram of DEGs
#Make a table of overlap between pairwise comparisons
d2 <- data.frame(id=unique(sig$id))
d2 <- data.frame(id=d2$id,KvT=ifelse(d2$id %in% sig[sig$sampleA == "kale" & sig$sampleB == "TO1000",]$id, 1, 0),
KvC=ifelse(d2$id %in% sig[sig$sampleA == "kale" & sig$sampleB == "cabbage",]$id, 1, 0),
CvT=ifelse(d2$id %in% sig[sig$sampleA == "cabbage" & sig$sampleB == "TO1000",]$id, 1, 0)
)
#Make Venn Diagram
library(VennDiagram)
pdf("comparisonVennDiagram.pdf",width=6,height=6,paper='special')
draw.triple.venn(area1=nrow(subset(d2,CvT==1)),
area2=nrow(subset(d2,KvT==1)),
area3=nrow(subset(d2,KvC==1)),
n12=nrow(subset(d2,CvT==1 & KvT==1)),
n23=nrow(subset(d2,KvT==1 & KvC==1)),
n13=nrow(subset(d2,CvT==1 & KvC==1)),
n123=nrow(subset(d2,CvT==1 & KvT==1 & KvC==1)),
category = c("Cabbage v TO1000", "Kale v TO100", "Kale v Cabbage"),
lty = "blank",
fill = c("skyblue", "pink1", "mediumorchid")
)
dev.off()
##GO term enrichment
library(topGO)
library(GO.db)
goTerms <- readMappings(file="../misc/topGO.txt")
CvTgotermUP <- factor(as.integer(resCvT$id %in% CvTsig[CvTsig$log2FC > 1,]$id))
names(CvTgotermUP) <- resCvT$id
CvTgotermUP <- topGO(CvTgotermUP,goTerms,nodeSize=5,"CvT_up",writeData=TRUE)
CvTgotermDOWN <- factor(as.integer(resCvT$id %in% CvTsig[CvTsig$log2FC < -1,]$id))
names(CvTgotermDOWN) <- resCvT$id
CvTgotermDOWN <- topGO(CvTgotermDOWN,goTerms,nodeSize=5,"CvT_down",writeData=TRUE)
#Read in sample metadata
sampleTable <- read.csv("../misc/sample_metadata.csv",header=T)
#Read in Counts Table
dds <- DESeqDataSetFromHTSeqCount(sampleTable,design= ~ condition)
#Prefilter
dds <- dds[rowSums(counts(dds)) > 1,]
#Set reference level
dds$condition <- relevel(dds$condition, ref="TO1000")
#Estimate Size Factors
dds <- estimateSizeFactors(dds)
#Estimate Dispersions
dds <- estimateDispersions(dds,fitType="parametric")
#Run Wald Test
dds <- nbinomWaldTest(dds)
#Make diagnostic figures of samples
#Make a heat map of samples
rld <- rlog(dds, blind=TRUE)
pdf("sampleHeatMap.pdf",width=6,height=6,paper='special')
sampleHeatMap(rld)
dev.off()
#Make a PCA plot of samples
pdf("samplePCA.pdf",width=6,height=6,paper='special')
pcaPlot(rld)
dev.off()
#Make results tables for each pairwise comparison
resKvT <- makeResultsTable(dds,"kale","TO1000",filter=FALSE)
resKvC <- makeResultsTable(dds,"kale","cabbage",filter=FALSE)
resCvT <- makeResultsTable(dds,"cabbage","TO1000",filter=FALSE)
#Combine results tables
resfull <- as.data.frame(rbind(resKvT,resKvC,resCvT))
#Adjust p-values for all results
resfull$padj <- p.adjust(resfull$pval,method="BH")
#Extract and output a table of normalized counts
normalizedCounts <- counts(dds, normalized=TRUE)
all_genes <- data.frame(gene=row.names(normalizedCounts), normalizedCounts[,c(3,4,5,1,2,6,7,8)],
as.data.frame(sapply(levels(dds$condition),
function(lvl) rowMeans(counts(dds,normalized=TRUE)[,dds$condition == lvl]))),
resfull[resfull$sampleA=="kale" & resfull$sampleB=="TO1000",c(6,8)],
resfull[resfull$sampleA=="kale" & resfull$sampleB=="cabbage",c(6,8)],
resfull[resfull$sampleA=="cabbage" & resfull$sampleB=="TO1000",c(6,8)])
colnames(all_genes) <- c("gene","kale1", "kale2", "kale3", "cabbage1", "cabbage2",
"TO10001", "TO10002", "TO10003", "kale_mean",
"cabbage_mean", "TO1000_mean", "KvT_log2FC", "KvT_padj",
"KvC_log2FC", "KvC_padj", "CvT_log2FC", "CvT_padj" )
write.table(all_genes, "Gene_expression_table.tsv",sep="\t",
quote=FALSE, row.names=FALSE)
setwd("Analysis/Replaying-the-evolutionary-tape-to-investigate-subgenome-dominance/figures_tables/gene_expression/")
df1 <- read.table("RS_100S1.csv",header=T,sep=",",row.names=1)
head(df1)
for(i in list.files(pattern=".csv")){
"i" <- read.table("RS_100S1.csv",header=T,sep=",",row.names=1)
}
rm(i)
for(i in list.files(pattern=".csv")){
i <- read.table("RS_100S1.csv",header=T,sep=",",row.names=1)
}
for(i in list.files(pattern=".csv")){
print(i) <- read.table(i,header=T,sep=",",row.names=1)
}
print(i)
rm(i)
df1 <- matrix(nrow=0,ncol=0)
for(i in list.files(pattern=".csv")){
df2 <- read.table(i,header=T,sep=",",row.names=1)
df1 <- rbind(df1,df2)
}
head(df1)
tail(df1)
gsub("RS_","",i)
gsub(".csv,"",gsub("RS_","",i))
gsub(".csv","",gsub("RS_","",i))
df1 <- matrix(nrow=0,ncol=0)
for(i in list.files(pattern=".csv")){
df2 <- read.table(i,header=T,sep=",",row.names=1)
df2$sample <- gsub(".csv","",gsub("RS_","",i))
df1 <- rbind(df1,df2)
}
head(df1)
tail(df1)
table(df1$Generation)
df2
df3 <- read.table(,header=T,sep=",",row.names=1)
head(df2)
df3 <- read.table("../gene_methylation/upstream/600S5_all_genes_upstream_methylation.txt",header=T,sep="\t")
head(df3)
df3$Feature <- gsub("gene:","",df3$Feature)
head(df3)
tail(df3)
head(df3)
for(x in df2$TO1000GeneID){
df3[df3$Feature==x,]$CG_Weighted_mC
}
for(x in df2$TO1000GeneID){
print(df3[df3$Feature==x,]$CG_Weighted_mC)
}
for(x in df2$TO1000GeneID){
df2[df2$TO1000GeneID==x,]$TO1000_mCG <- f3[df3$Feature==x,]$CG_Weighted_mC
}
for(x in df2$TO1000GeneID){
df2[df2$TO1000GeneID==x,]$TO1000_mCG <- df3[df3$Feature==x,]$CG_Weighted_mC
}
head(df2)
test <- merge(df2,df3,df2$TO1000GeneID,df3$Feature)
test <- merge(df2,df3,by.x = df2$TO1000GeneID,by.y = df3$Feature)
test <- merge(x=df2,y=df3,by.x = df2$TO1000GeneID,by.y = df3$Feature)
test <- merge(x=df2,y=df3,by.x = df2$TO1000GeneID,by.y = df3$Feature)
head(df2$TO1000GeneID)
head(df3$Feature)
head(df3)
test <- merge(x=as.data.frame(df2),y=df3,by.x = df2$TO1000GeneID,by.y = df3$Feature)
test <- merge(x=as.data.frame(df2),y=df3,by.x = "df2$TO1000GeneID",by.y = df3$Feature)
test <- merge(x=as.data.frame(df2),y=df3,by.x = "df2$TO1000GeneID",by.y = "df3$Feature")
df2$TO1000GeneID
head(df2)
test <- merge(x=df2,y=df3)
test <- merge(x=as.data.frame(df2),y=df3,by.x=TO1000GeneID,by.y=Feature)
test <- merge(x=df2,y=df3,by.x=TO1000GeneID,by.y=Feature)
test <- merge(x=df2,y=df3,by.x="TO1000GeneID",by.y="Feature")
head(test)
nrow(test)
nrow(df2)
head(df2)
df2[c(10,24),]
df2[,c(10,24)]
head(df2[,c(10,24)])
head(df2[,c(9,23)])
head(df2)
head(df2[,c(9,12,23,26)])
head(df2[,c(9,13,23,27,31,32,33)])
head(d3)
head(df3)
head(df1)
df1 <- matrix(nrow=0,ncol=0)
for(i in list.files(pattern=".csv")){
name <- gsub(".csv","",gsub("RS_","",i))
upstream <- paste("../gene_methylation/upstream/",name,"_all_genes_upstream_methylation.txt")
df2 <- read.table(i,header=T,sep=",",row.names=1)[,c(9,13,23,27,31,32,33)])
df2$sample <- name
df3 <- read.table(i2,header=T,sep="\t")[,c(1,6,11,16)]
df2 <- merge(merge(df2,df3,"TO1000GeneID","Feature"),df3,"TO1000GeneID","Feature")
df1 <- rbind(df1,df2)
}
colnames(df1) <- c(TO100)
rm(df1,df2,df3)
df1 <- matrix(nrow=0,ncol=0)
for(i in list.files(pattern=".csv")){
name <- gsub(".csv","",gsub("RS_","",i))
upstream <- paste("../gene_methylation/upstream/",name,"_all_genes_upstream_methylation.txt")
df2 <- read.table(i,header=T,sep=",",row.names=1)[,c(9,13,23,27,31,32,33)])
df2$sample <- name
df3 <- read.table(i2,header=T,sep="\t")[,c(1,6,11,16)]
df2 <- merge(merge(df2,df3,"TO1000GeneID","Feature"),df3,"TO1000GeneID","Feature")
df1 <- rbind(df1,df2)
}
for(i in list.files(pattern=".csv")){
name <- gsub(".csv","",gsub("RS_","",i))
upstream <- paste("../gene_methylation/upstream/",name,"_all_genes_upstream_methylation.txt")
df2 <- read.table(i,header=T,sep=",",row.names=1)[,c(9,13,23,27,31,32,33)])
df2$sample <- name
df3 <- read.table(upstream,header=T,sep="\t")[,c(1,6,11,16)]
df2 <- merge(merge(df2,df3,"TO1000GeneID","Feature"),df3,"TO1000GeneID","Feature")
df1 <- rbind(df1,df2)
}
for(i in list.files(pattern=".csv")){
name <- gsub(".csv","",gsub("RS_","",i))
upstream <- paste("../gene_methylation/upstream/",name,"_all_genes_upstream_methylation.txt")
df2 <- read.table(i,header=T,sep=",",row.names=1)[,c(9,13,23,27,31,32,33)])
df2$sample <- name
df3 <- read.table(upstream,header=T,sep="\t")[,c(1,6,11,16)]
df2 <- merge(merge(df2,df3,by.x="TO1000GeneID",by.y="Feature"),df3,by.x="R500GeneID",by.y="Feature")
df1 <- rbind(df1,df2)
}
rm(x)
for(i in list.files(pattern=".csv")){
name <- gsub(".csv","",gsub("RS_","",i))
upstream <- paste("../gene_methylation/upstream/",name,"_all_genes_upstream_methylation.txt")
df2 <- read.table(i,header=T,sep=",",row.names=1)[,c(9,13,23,27,31,32,33)])
df2$sample <- name
df3 <- read.table(upstream,header=T,sep="\t")[,c(1,6,11,16)]
df2 <- merge(merge(df2,df3,by.x="TO1000GeneID",by.y="Feature"),df3,by.x="R500GeneID",by.y="Feature")
df1 <- rbind(df1,df2)
}
read.table(i,header=T,sep=",",row.names=1)[,c(9,13,23,27,31,32,33)])
read.table(i,header=T,sep=",",row.names=1)[,c(9,13,23,27,31,32,33)]
df1 <- matrix(nrow=0,ncol=0)
for(i in list.files(pattern=".csv")){
name <- gsub(".csv","",gsub("RS_","",i))
upstream <- paste("../gene_methylation/upstream/",name,"_all_genes_upstream_methylation.txt")
df2 <- read.table(i,header=T,sep=",",row.names=1)[,c(9,13,23,27,31,32,33)]
df2$sample <- name
df3 <- read.table(upstream,header=T,sep="\t")[,c(1,6,11,16)]
df2 <- merge(merge(df2,df3,by.x="TO1000GeneID",by.y="Feature"),df3,by.x="R500GeneID",by.y="Feature")
df1 <- rbind(df1,df2)
}
for(i in list.files(pattern=".csv")){
name <- gsub(".csv","",gsub("RS_","",i))
upstream <- paste("../gene_methylation/upstream/",name,"_all_genes_upstream_methylation.txt",sep="")
df2 <- read.table(i,header=T,sep=",",row.names=1)[,c(9,13,23,27,31,32,33)]
df2$sample <- name
df3 <- read.table(upstream,header=T,sep="\t")[,c(1,6,11,16)]
df2 <- merge(merge(df2,df3,by.x="TO1000GeneID",by.y="Feature"),df3,by.x="R500GeneID",by.y="Feature")
df1 <- rbind(df1,df2)
}
read.table("../gene_methylation/upstream/100S1_all_genes_upstream_methylation.txt")
list.files("../gene_methylation/upstream/")
samples <- read.csv('../misc/samples.csv',header=T)
df1 <- matrix(nrow=0,ncol=0)
samples <- read.csv('../../misc/samples.csv',header=T)
samples$Sample
df1 <- matrix(nrow=0,ncol=0)
for(i in samples$Sample{
for(i in samples$Sample){
expression <- paste("RS_",i,".csv",sep="")
upstream <- paste("../gene_methylation/upstream/"i,"_all_genes_upstream_methylation.txt",sep="")
df2 <- read.table(i,header=T,sep=",",row.names=1)[,c(9,13,23,27,31,32,33)]
df2$sample <- name
df3 <- read.table(upstream,header=T,sep="\t")[,c(1,6,11,16)]
df2 <- merge(merge(df2,df3,by.x="TO1000GeneID",by.y="Feature"),df3,by.x="R500GeneID",by.y="Feature")
df1 <- rbind(df1,df2)
}
expression
for(i in samples$Sample){
expression <- paste("RS_",i,".csv",sep="")
upstream <- paste("../gene_methylation/upstream/"i,"_all_genes_upstream_methylation.txt",sep="")
df2 <- read.table(expression,header=T,sep=",",row.names=1)[,c(9,13,23,27,31,32,33)]
df2$sample <- name
df3 <- read.table(upstream,header=T,sep="\t")[,c(1,6,11,16)]
df2 <- merge(merge(df2,df3,by.x="TO1000GeneID",by.y="Feature"),df3,by.x="R500GeneID",by.y="Feature")
df1 <- rbind(df1,df2)
}
for(i in samples$Sample){
i2 <- paste("RS_",i,".csv",sep="")
i3<- paste("../gene_methylation/upstream/"i,"_all_genes_upstream_methylation.txt",sep="")
df2 <- read.table(i2,header=T,sep=",",row.names=1)[,c(9,13,23,27,31,32,33)]
df2$sample <- name
df3 <- read.table(i3,header=T,sep="\t")[,c(1,6,11,16)]
df2 <- merge(merge(df2,df3,by.x="TO1000GeneID",by.y="Feature"),df3,by.x="R500GeneID",by.y="Feature")
df1 <- rbind(df1,df2)
}
i2
samples <- read.csv('../misc/samples.csv',header=T)
for(i in samples$Sample){
print(i)
}
samples
samples[4:20]$Sample
samples[4:20,]$Sample
for(i in samples[4:20,]$Sample){
i2 <- paste("RS_",i,".csv",sep="")
i3<- paste("../gene_methylation/upstream/"i,"_all_genes_upstream_methylation.txt",sep="")
df2 <- read.table(i2,header=T,sep=",",row.names=1)[,c(9,13,23,27,31,32,33)]
df2$sample <- name
df3 <- read.table(i3,header=T,sep="\t")[,c(1,6,11,16)]
df2 <- merge(merge(df2,df3,by.x="TO1000GeneID",by.y="Feature"),df3,by.x="R500GeneID",by.y="Feature")
df1 <- rbind(df1,df2)
}
i2 <- paste("RS_",i,".csv",sep=""
i2 <- paste("RS_",i,".csv",sep="")
i2
